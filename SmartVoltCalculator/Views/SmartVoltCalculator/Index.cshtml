@{
    ViewData["Title"] = "SmartVoltCalculator";
}

<div x-data="calculator" class="items-center justify-center align-middle">
  <div class="flex items-center justify-center align-middle" style="min-height: 90vh;">
    <div class="w-full m-5 items-center justify-center align-middle">
      <div class="mt-4 mb-4">
        <label for="monthlyElectricityUsage" class="block mb-2 text-sm font-medium text-white dark:text-white">Monthly Electricity Usage (kWh):</label>
        <input type="number" x-model="monthlyElectricityUsage"  id="monthlyElectricityUsage" class="bg-gray-800 border border-gray-800 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
      </div>
      <div class="mt-4 mb-4">
        <label for="priceKWH" class="block mb-2 text-sm font-medium text-white dark:text-white">Your kWh price (pence):</label>
        <input type="number" id="priceKWH" x-model="priceKWH" class="bg-gray-800 border border-gray-800 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
      </div>
      <div id="accordion-collapse" data-accordion="collapse" class="w-full">
        <h2 id="accordion-collapse-heading-1">
          <button type="button" class="flex items-center justify-between w-full h-15 p-3 font-medium rtl:text-right text-gray-500 border border-gray-900 rounded-t-xl focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-800 dark:text-gray-400 hover:bg-gray-800 dark:hover:bg-gray-800 gap-3" data-accordion-target="#accordion-collapse-body-1" aria-expanded="true" aria-controls="accordion-collapse-body-1">
            <span>Solar Panels</span>
            <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"/>
            </svg>
          </button>
        </h2>
        <div id="accordion-collapse-body-1" class="hidden" aria-labelledby="accordion-collapse-heading-1">
          <div class="p-5 border border-b-0 border-gray-200 dark:border-gray-700 dark:bg-gray-900">
            <div class="grid gap-6 mb-6 md:grid-cols-2">
              <div>
                <label for="estimatedSolarSystemSize" class="block mb-2 text-sm font-medium text-white dark:text-white">Estimated Solar System Size (kW):</label>
                <input type="number" id="estimatedSolarSystemSize" value="0" class="bg-gray-800 border border-gray-800 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
              </div>
              <div>
                <label for="averageDailySunlightHours" class="block mb-2 text-sm font-medium text-white dark:text-white">Average Daily Sunlight Hours:</label>
                <input type="number" id="averageDailySunlightHours" value="0" class="bg-gray-800 border border-gray-800 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
              </div>
            </div>
          </div>
        </div>
        <h2 id="accordion-collapse-heading-2">
          <button type="button" class="flex items-center justify-between w-full h-15 p-3 font-medium rtl:text-right text-gray-500 border border-b-0 border-gray-200 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 gap-3" data-accordion-target="#accordion-collapse-body-2" aria-expanded="false" aria-controls="accordion-collapse-body-2">
            <span>Battery Capacity</span>
            <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"/>
            </svg>
          </button>
        </h2>
        <div id="accordion-collapse-body-2" class="hidden" aria-labelledby="accordion-collapse-heading-2">
          <div class="p-5 border border-gray-200 dark:border-gray-700">
            <div class="grid gap-6 mb-6 md:grid-cols-2">
              <div>
                <label for="batteryCapacity" class="block mb-2 text-sm font-medium text-white dark:text-white">Battery Capacity (kWh):</label>
                <input type="number" id="batteryCapacity" class="bg-gray-800 border border-gray-800 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
              </div>
              <div>
                <label for="batteriesQuantity" class="block mb-2 text-sm font-medium text-white dark:text-white">Batteries quantity:</label>
                <input type="number" id="batteriesQuantity" class="bg-gray-800 border border-gray-800 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="w-full flex items-center justify-center align-middle">
      <div class="max-w-sm w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6 items-center justify-center">
          <div class="flex justify-between mb-3">
            <div class="flex justify-center items-center">
              <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white pe-1">Cost calculations</h5>
              <svg data-popover-target="chart-info" data-popover-placement="bottom" class="w-3.5 h-3.5 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white cursor-pointer ms-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm0 16a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm1-5.034V12a1 1 0 0 1-2 0v-1.418a1 1 0 0 1 1.038-.999 1.436 1.436 0 0 0 1.488-1.441 1.501 1.501 0 1 0-3-.116.986.986 0 0 1-1.037.961 1 1 0 0 1-.96-1.037A3.5 3.5 0 1 1 11 11.466Z"/>
              </svg>
              <div data-popover id="chart-info" role="tooltip" class="absolute z-10 invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
                <div class="p-3 space-y-2">
                  <h3 class="font-semibold text-gray-900 dark:text-white">Activity growth - Incremental</h3>
                  <p>Report helps navigate cumulative growth of community activities. Ideally, the chart should have a growing trend, as stagnating chart signifies a significant decrease of community activity.</p>
                  <h3 class="font-semibold text-gray-900 dark:text-white">Calculation</h3>
                  <p>For each date bucket, the all-time volume of activities is calculated. This means that activities in period n contain all activities up to period n, plus the activities generated by your community in period.</p>
                  <a href="#" class="flex items-center font-medium text-blue-600 dark:text-blue-500 dark:hover:text-blue-600 hover:text-blue-700 hover:underline">Read more
                    <svg class="w-2 h-2 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                    </svg></a>
                </div>
                <div data-popper-arrow></div>
              </div>
            </div>
            <div>
              <button type="button" data-tooltip-target="data-tooltip" data-tooltip-placement="bottom" class="hidden sm:inline-flex items-center justify-center text-gray-500 w-8 h-8 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm">
                <svg class="w-3.5 h-3.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 18">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 1v11m0 0 4-4m-4 4L4 8m11 4v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3"/>
                </svg><span class="sr-only">Download data</span>
              </button>
              <div id="data-tooltip" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                Download CSV
                <div class="tooltip-arrow" data-popper-arrow></div>
              </div>
            </div>
          </div>
      
          <div>
            <div class="flex items-center justify-center" id="devices">
              <div class="flex items-center me-4">
                <input id="solarPanels" type="checkbox" value="solarPanels" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                <label for="solarPanels" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Solar Panels</label>
              </div>
              <div class="flex items-center me-4">
                <input id="battery" type="checkbox" value="battery" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                <label for="battery" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Batteries</label>
              </div>
            </div>
          </div>
          <!-- Donut Chart -->
          <div class="py-6" id="donut-chart"></div>
        </div>
    </div>
  </div>
  <script>
  // ApexCharts options and config
  window.addEventListener("load", function() {
    let monthlyElectricityUsageInput = document.getElementById('monthlyElectricityUsage');
    let priceKWHInput = document.getElementById('priceKWH');
    
    function calculateMonthlySolarSavings(){
      let averageDailySunlightHours = parseFloat(document.getElementById('averageDailySunlightHours').value);
      let estimatedSolarSystemSize = parseFloat(document.getElementById('estimatedSolarSystemSize').value);
      console.log('priceKWHInput ' + priceKWHInput.value);
      console.log('averageDailySunlightHours ' + averageDailySunlightHours);
      console.log('estimatedSolarSystemSize ' + estimatedSolarSystemSize);
      let dailyEnergyProduction = estimatedSolarSystemSize * averageDailySunlightHours;
      let monthlyEnergyProduction = dailyEnergyProduction * 30;
      return monthlyEnergyProduction * (priceKWHInput.value / 100);
    }
    
    function calculateMonthlyUsage() {
      let usageKWH = monthlyElectricityUsageInput.value;
      let pricePence = priceKWHInput.value;
      return parseFloat((usageKWH * (pricePence / 100)).toFixed(2));
    }
      
    let monthlyUsage = calculateMonthlyUsage();
    
    const getChartOptions = () => {
        return {
          series: [0, 0, monthlyUsage],
          colors: ["#32a85a", "#9aa82d", "#a3344a"],
          chart: {
            height: 400,
            width: "100%",
            type: "donut",
          },
          stroke: {
            colors: ["transparent"],
            lineCap: "",
          },
          plotOptions: {
            pie: {
              donut: {
                labels: {
                  show: true,
                  name: {
                    show: true,
                    fontFamily: "Inter, sans-serif",
                    offsetY: 20,
                  },
                  total: {
                    showAlways: true,
                    show: true,
                    label: "Calculations",
                    fontFamily: "Inter, sans-serif",
                    formatter: function (w) {
                      return `£${parseFloat(monthlyUsage).toFixed(2)}`
                    },
                  },
                  value: {
                    show: true,
                    fontFamily: "Inter, sans-serif",
                    offsetY: -20,
                    formatter: function (value) {
                      return "£" + value
                    },
                  },
                },
                size: "80%",
              },
            },
          },
          grid: {
            padding: {
              top: -2,
            },
          },
          labels: ["Solar Panels", "Battery", "Total Costs"],
          dataLabels: {
            enabled: false,
          },
          legend: {
            position: "bottom",
            fontFamily: "Inter, sans-serif",
          },
          yaxis: {
            labels: {
              formatter: function (value) {
                return "£" + value
              },
            },
          },
          xaxis: {
            labels: {
              formatter: function (value) {
                return "£" + value
              },
            },
            axisTicks: {
              show: false,
            },
            axisBorder: {
              show: false,
            },
          },
        }
      }

      if (document.getElementById("donut-chart") && typeof ApexCharts !== 'undefined') {
        const chart = new ApexCharts(document.getElementById("donut-chart"), getChartOptions());
        chart.render();
  
        // Function to handle the checkbox change event
        function handleCheckboxChange(chart) {
          const solarPanelsCheckbox = document.getElementById('solarPanels');
          const batteryCheckbox = document.getElementById('battery');
          
          monthlyUsage = calculateMonthlyUsage();
          let solar = calculateMonthlySolarSavings();
          console.log(solar)
          let history = monthlyUsage;
          let battery = 26.5;
          if (solarPanelsCheckbox.checked && batteryCheckbox.checked) {
            let otherUsage = monthlyUsage - solar - battery;
            monthlyUsage = history - solar - battery;
            chart.updateSeries([solar, battery, otherUsage]);
          } else if (solarPanelsCheckbox.checked) {
            isNaN(solar) ? 
              monthlyUsage = history : 
              monthlyUsage = history - solar;
            chart.updateSeries([solar, 0, monthlyUsage]);
          } else if (batteryCheckbox.checked) {
            monthlyUsage = history - battery;
            chart.updateSeries([0, 26.5, monthlyUsage]);
          } else {
            chart.updateSeries([0, 0, monthlyUsage]);
            monthlyUsage = history;
          }
        }
  
        // Attach the event listener to each checkbox
        const checkboxes = document.querySelectorAll('#devices input[type="checkbox"]');
        checkboxes.forEach((checkbox) => {
          checkbox.addEventListener('change', () => handleCheckboxChange(chart));
        });
  
        // Attach the event listener to each input field
        monthlyElectricityUsageInput.addEventListener('input', () => handleCheckboxChange(chart));
        priceKWHInput.addEventListener('input', () => handleCheckboxChange(chart));
      }
  });
</script>

</div>

@section Scripts
{
    <script src="/js/smartVoltCalculator/index.js"></script>
}